{% set profile = profiles[devices[this_dev].profile] -%}
{# Max. number of WAN interfaces * Max. number of Hubs -#}
{% set add_path_num = profiles.values()|map(attribute='wan_intf')|map('count')|max * regions.values()|map(attribute='hubs')|map('count')|max -%}
config router bgp
  set as {{ regions[devices[this_dev].region].as }}
  set router-id {{ devices[this_dev].router_id }}
  set keepalive-timer 5
  set holdtime-timer 15
  set ibgp-multipath enable
  set additional-path enable
  # additional-path-select = max. number of overlays * max. number of hubs
  set additional-path-select {{ add_path_num }}
  config neighbor-group
    edit "EDGE"
      set soft-reconfiguration enable
      set advertisement-interval 1
      set link-down-failover enable
      set remote-as {{ regions[devices[this_dev].region].as }}
      set additional-path send
      # adv-additional-path = max. number of overlays * max. number of hubs
      set adv-additional-path {{ add_path_num }}
      set route-reflector-client enable
    next
  end
  config neighbor-range
    edit 1
      set prefix {{ globals.tunnel_subnet_aggregate }}
      set neighbor-group "EDGE"
    next
  end
end

{# BEGIN: For multi-regional topology only #}
{% if regions|reject("==", devices[this_dev].region)|list|count -%}
{% set reg_id = (regions|list).index(devices[this_dev].region) + 1 -%}
config router static
  {%- set ns = namespace(sr_i = 103) %}
  {%- for reg in regions if reg != devices[this_dev].region %}
  {%- for h in regions[reg].hubs %}
  {%- set hubloop = loop %}
  {%- for w in profile.wan_intf %}
  edit {{ ns.sr_i }}
    set dst {{ regions[reg].tunnel_subnet[loop.index0] }}
    set device "{{reg|upper}}_H{{hubloop.index}}_T{{loop.index}}"
    set comment "Cross-region BGP NH reachability (T{{loop.index}})"
  next
  {%- set ns.sr_i = ns.sr_i + 1 %}
  {%- endfor %}
  {%- endfor %}
  {%- endfor %}
end

# Use BGP communities to identify local region
config router community-list
  edit "{{ devices[this_dev].region|upper }}_EDGE"
    config rule
      edit 1
        set action permit
        set match "{{ regions[devices[this_dev].region].as }}:{{ reg_id * 2 }}"
      next
    end
  next
end
# Use BGP NH aggregates to identify overlays
config router prefix-list
  {%- for w in profile.wan_intf %}
  edit "NH_T{{loop.index}}"
    config rule
      edit 1
        set prefix {{ globals.tunnel_subnet[loop.index0] }}
        set le 32
      next
    end
  next
  {%- endfor %}
end
config router route-map
  # Avoid duplicate advertisement to remote regions
  {%- for w in profile.wan_intf %}
  edit "T{{loop.index}}_OUT"
    config rule
      edit 1
        set match-community "{{ devices[this_dev].region|upper }}_EDGE"
        set match-ip-nexthop "NH_T{{loop.index}}"
      next
    end
  next
  {%- endfor %}
  # Set regional community
  edit "EDGE_IN"
    config rule
      edit 1
        set set-community "{{ regions[devices[this_dev].region].as }}:{{ reg_id * 2 }}"
      next
    end
  next
end

config system interface
  {%- for l in devices[this_dev].lo_bgp %}
  edit "lo-BGP_T{{ loop.index }}"
    set vdom "root"
    set type loopback
    set ip {{ l }} 255.255.255.255
    set allowaccess ping
    set description "Inter-regional peering (T{{loop.index}})"
  next
  {%- endfor %}
end

config router bgp
  config neighbor
    # Remote Regional Hubs
    {% for reg in regions if reg != devices[this_dev].region -%}
    {%- for h in regions[reg].hubs %}
    {%- for w in profile.wan_intf %}
    edit {{ devices[h].lo_bgp[loop.index0] }}
      set soft-reconfiguration enable
      set advertisement-interval 1
      set link-down-failover enable
      set connect-timer 1
      set remote-as {{ regions[devices[this_dev].region].as }}
      set additional-path both
      # adv-additional-path = number of overlays
      set adv-additional-path {{ profile.wan_intf|count }}
      set next-hop-self enable
      set interface "lo-BGP_T{{loop.index}}"
      set update-source "lo-BGP_T{{loop.index}}"
      set route-map-out "T{{loop.index}}_OUT"
      set route-reflector-client enable
    next
    {%- endfor %}
    {%- endfor %}
    {%- endfor %}
  end
  config neighbor-group
    # Mark Edge prefixes with regional community
    edit "EDGE"
      set route-map-in "EDGE_IN"
    next
  end
end
{% endif %}
{# END: For multi-regional topology only #}

config router static
  edit 101
    set dst {{ globals.corp_aggregate }}
    set blackhole enable
    set comment "Avoid potential leak of corporate traffic to underlay"
  next
  edit 102
    set dst {{ globals.tunnel_subnet_aggregate }}
    set blackhole enable
    set comment "Avoid potential recursive resolution of corporate BGP routes via underlay"
  next
end
