{# 03-Hub-Routing.j2                                                          #}
{# Release: 7.4 (EXPERIMENTAL)                                                #}
{# Design flavor: Dynamic BGP on Loopback (unified, ADVPN 2.0 ready)          #}
{# -------------------------------------------------------------------------- #}
{# Disclaimer: Normally, this file is not supposed to be edited by users.     #}
{# -------------------------------------------------------------------------- #}

{% import 'Project' as project with context %}

{% set multi_vrf = true if project.regions[region].vrfs|default([]) else false %}
{% set pe_vrf = project.pe_vrf|default(1) if multi_vrf else 0 %}
{% set vrf_rt_as = project.vrf_rt_as|default('65000') %}

{# If BGP peering is not customized, use the project-wide defaults #}
{% set peering = project.hubs[hostname].peering|default(
        {
          'EDGE': {
            'dynamic_bgp': project.dynamic_bgp|default(false),
            'lo_summary': project.lo_summary
          }
        }
    )
%}

{# If options are not customized, use the project-wide defaults #}
{% set options = project.profiles[profile].options|default(
        {
          'strict_peering': project.strict_peering|default(true),
          'strict_pbr': project.strict_pbr|default(true)
        }
    )
%}

{# For regions with 4-byte ASN, use a dummy 2-byte ASN for BGP communities (4-byte ASN is not supported in communities) #}
{% set community_as = project.regions[region].as 
                      if project.regions[region].as|int < 65536 
                      else project.short_community_as|default('65000') %}

config router community-list
  edit "SLA_OK"
    config rule
      edit 1
        set action permit
        set match "{{ community_as }}:99"
      next
    end
  next
end
config router route-map
  edit "LOCAL_REGION"
    config rule
      edit 1
        {# Do not advertise to EBGP peers (outside the region #}
        set set-community "no-export"
      next
    end
  next
end

config router bgp
  set as {{ project.regions[region].as }}
  set router-id {{ loopback|ipaddr('address') }}
  set keepalive-timer 15
  set holdtime-timer 45
  set ibgp-multipath enable
  set ebgp-multipath enable
  set recursive-next-hop enable
  set recursive-inherit-priority enable
  set graceful-restart enable
  {% if options.strict_peering|default(true) %}
  config neighbor-range
    purge
  end
  config neighbor-group
    purge
  end
  {% endif %}
  {% for p in peering %}  
  config neighbor-group
    edit {{ p }}
      set soft-reconfiguration enable
      set capability-graceful-restart enable
      set advertisement-interval 1
      set next-hop-self enable
      set remote-as {{ project.regions[region].as }}
      set interface "Lo"
      set update-source "Lo"
      unset route-reflector-client{{'-vpnv4' if not multi_vrf}}
      {% if not peering[p].dynamic_bgp and project.intrareg_advpn|default(true) %}
      set route-reflector-client{{'-vpnv4' if multi_vrf}} enable
      {% else %}
      set route-reflector-client{{'-vpnv4' if multi_vrf}} disable
      {% endif %}
      {% if multi_vrf %}
      set soft-reconfiguration-vpnv4 enable
      set capability-graceful-restart-vpnv4 enable      
      {% else %}
      unset soft-reconfiguration-vpnv4
      unset capability-graceful-restart-vpnv4
      {% endif %}
    next
  end
  config neighbor-range
    edit {{ loop.index }}
      set prefix {{ peering[p].lo_summary }}
      set neighbor-group "{{ p }}"
    next
  end
  {% endfor %}

  config network
    edit 102
      set prefix {{ project.lo_summary }}
      set route-map "LOCAL_REGION"
    next  
    {% set network_advertised = [] %}
    {% for i in project.profiles[profile].interfaces if i.role == 'lan' %}
    {% if i.name is defined and 
          i.ip is defined and 
          i.advertise|default(true) and
          not i.ip in network_advertised %}
    edit {{ 110 + loop.index }}
      set prefix {{ i.ip|ipaddr(0) }}
    next
    {{ network_advertised.append(i.ip) or "" }}
    {% else %}
    delete {{ 110 + loop.index }}
    {% endif %}
    {% endfor %}
  end

  {% if multi_vrf %}
  config vrf
    edit "{{ pe_vrf }}"
      set role pe
    next
    {% for i in project.profiles[profile].interfaces if i.vrf is defined and i.name is defined %}
    edit "{{ i.vrf }}"
      set role "ce"
      set rd "{{ vrf_rt_as }}:{{ i.vrf }}"
      set import-rt "{{ vrf_rt_as }}:{{ i.vrf }}"
      set export-rt "{{ vrf_rt_as }}:{{ i.vrf }}"
    next
    {% endfor %}
  end  
  {% else %}
  config vrf
    purge
  end
  {% endif %}
end

{% if options.strict_pbr|default(true) %}
config router policy
  purge
end
{% endif %}
{% if project.overlay_stickiness|default(false) %}
config router policy
  {% for i in project.profiles[profile].interfaces if i.role == 'wan' and i.name is defined %}
  edit {{ loop.index }}
    set input-device "EDGE_{{ i.ol_type }}"
    set output-device "EDGE_{{ i.ol_type }}"
    {{'un' if not project.lan_summary|default()}}set dst {{ project.lan_summary|default() }}
  next
  {% endfor %}
end
{% endif %}

config router static
  {% if project.lan_summary is defined %}
  edit 101
    set dst {{ project.lan_summary }}
    set blackhole enable
    set vrf {{ pe_vrf }}
    set comment "Avoid potential leak of corporate traffic to underlay"
  next
  {% else %}
  delete 101
  {% endif %}
  edit 102
    set dst {{ project.lo_summary }}
    set blackhole enable
    set vrf {{ pe_vrf }}
    set comment "Avoid potential recursive resolution of corporate BGP routes via underlay"
  next
end
